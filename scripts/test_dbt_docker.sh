#!/bin/bash
# Script pour tester dbt dans l'environnement Docker SIGETI

echo "üß™ Test de dbt dans l'environnement Docker SIGETI"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# V√©rifier que Docker Compose est disponible
if ! command -v docker-compose &> /dev/null; then
    print_status $RED "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

print_status $GREEN "‚úÖ Docker Compose disponible"

# V√©rifier que le service dbt est d√©marr√©
if ! docker-compose ps dbt-service | grep -q "Up"; then
    print_status $YELLOW "‚ö†Ô∏è  Service dbt non d√©marr√© - d√©marrage..."
    docker-compose up -d dbt-service
    sleep 10
fi

print_status $GREEN "‚úÖ Service dbt op√©rationnel"

echo ""
print_status $BLUE "üîç Test 1: Configuration dbt"
echo "--------------------------------"

# Test de la configuration dbt
if docker-compose exec -T dbt-service dbt debug --profiles-dir /opt/dbt_sigeti --target docker; then
    print_status $GREEN "‚úÖ Configuration dbt valide"
else
    print_status $RED "‚ùå Probl√®me de configuration dbt"
    exit 1
fi

echo ""
print_status $BLUE "üîç Test 2: Connexion √† la base de donn√©es"
echo "----------------------------------------"

# Test de connexion √† la base
if docker-compose exec -T dbt-service python -c "
import psycopg2
try:
    conn = psycopg2.connect(
        host='host.docker.internal',
        port=5432,
        database='sigeti_dwh',
        user='sigeti_user',
        password='sigeti123'
    )
    print('‚úÖ Connexion DB r√©ussie')
    conn.close()
except Exception as e:
    print(f'‚ùå Erreur de connexion: {e}')
    exit(1)
"; then
    print_status $GREEN "‚úÖ Connexion √† sigeti_dwh r√©ussie"
else
    print_status $RED "‚ùå Impossible de se connecter √† sigeti_dwh"
    print_status $YELLOW "üí° V√©rifiez que la base est initialis√©e:"
    echo "   ./docker-sigeti.ps1 init-db"
    echo "   # ou"
    echo "   make init-db"
    exit 1
fi

echo ""
print_status $BLUE "üîç Test 3: Compilation des mod√®les"
echo "--------------------------------"

# Test de compilation des mod√®les dbt
if docker-compose exec -T dbt-service dbt parse --profiles-dir /opt/dbt_sigeti --target docker; then
    print_status $GREEN "‚úÖ Compilation des mod√®les r√©ussie"
else
    print_status $RED "‚ùå Erreur de compilation des mod√®les"
    exit 1
fi

echo ""
print_status $BLUE "üîç Test 4: Installation des d√©pendances"
echo "--------------------------------------"

# Test de dbt deps
if docker-compose exec -T dbt-service dbt deps --profiles-dir /opt/dbt_sigeti --target docker; then
    print_status $GREEN "‚úÖ Installation des d√©pendances r√©ussie"
else
    print_status $YELLOW "‚ö†Ô∏è  Pas de d√©pendances √† installer (normal si aucun packages.yml)"
fi

echo ""
print_status $BLUE "üîç Test 5: Variables d'environnement"
echo "-----------------------------------"

# V√©rifier les variables d'environnement dans le conteneur
docker-compose exec -T dbt-service env | grep SIGETI | while read line; do
    if [[ $line == *"PASSWORD"* ]]; then
        # Masquer les mots de passe
        var_name=$(echo $line | cut -d'=' -f1)
        var_value=$(echo $line | cut -d'=' -f2)
        masked_value=$(echo $var_value | sed 's/./*/g')
        print_status $GREEN "‚úÖ $var_name=$masked_value"
    else
        print_status $GREEN "‚úÖ $line"
    fi
done

echo ""
print_status $GREEN "üéâ TOUS LES TESTS R√âUSSIS !"
echo "=================================================="
print_status $BLUE "üìã Configuration valid√©e:"
echo "   - Base de donn√©es: sigeti_dwh"
echo "   - Utilisateur: sigeti_user"  
echo "   - Host: host.docker.internal"
echo "   - Target dbt: docker"
echo ""
print_status $YELLOW "üí° Commandes dbt disponibles dans le conteneur:"
echo "   docker-compose exec dbt-service dbt run --target docker"
echo "   docker-compose exec dbt-service dbt test --target docker"  
echo "   docker-compose exec dbt-service dbt docs generate --target docker"