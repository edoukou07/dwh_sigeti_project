#!/usr/bin/env python3
"""
Test de connectivit√© Airflow pour SIGETI DWH
"""
import requests
import time
import sys


def test_airflow_connection():
    """Test la connectivit√© avec Airflow"""
    
    print("=" * 60)
    print("üå™Ô∏è TEST DE CONNECTIVIT√â AIRFLOW")
    print("=" * 60)
    
    # Configuration
    airflow_url = "http://localhost:8080"
    username = "airflow"
    password = "airflow"
    
    print(f"\nüìã Configuration:")
    print(f"  URL Airflow: {airflow_url}")
    print(f"  Utilisateur: {username}")
    print(f"  Mot de passe: ********")
    
    # Test 1: Health Check
    print("\n" + "=" * 40)
    print("TEST 1: Health Check")
    print("=" * 40)
    
    try:
        response = requests.get(f"{airflow_url}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Airflow est accessible")
            health_data = response.json()
            print(f"   Version: {health_data.get('scheduler', {}).get('status', 'N/A')}")
        else:
            print(f"‚ùå Health check √©chou√©: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connexion impossible: {e}")
        print("üí° V√©rifiez que les services Docker sont d√©marr√©s")
        return False
    
    # Test 2: Login
    print("\n" + "=" * 40)
    print("TEST 2: Authentification")
    print("=" * 40)
    
    try:
        # Obtenir le token CSRF
        session = requests.Session()
        login_page = session.get(f"{airflow_url}/login")
        
        # Simulation de login (version simplifi√©e)
        print("üîç Test d'acc√®s √† l'interface...")
        
        if login_page.status_code == 200:
            print("‚úÖ Interface Airflow accessible")
        else:
            print(f"‚ùå Interface non accessible: {login_page.status_code}")
            return False
    
    except Exception as e:
        print(f"‚ùå Erreur d'authentification: {e}")
        return False
    
    # Test 3: API
    print("\n" + "=" * 40)
    print("TEST 3: API Airflow")
    print("=" * 40)
    
    try:
        # Test de l'API version
        api_response = session.get(f"{airflow_url}/api/v1/version", timeout=10)
        
        if api_response.status_code == 200:
            print("‚úÖ API Airflow accessible")
            version_data = api_response.json()
            print(f"   Version API: {version_data.get('version', 'N/A')}")
        elif api_response.status_code == 401:
            print("‚ö†Ô∏è  API accessible mais authentification requise")
        else:
            print(f"‚ùå API non accessible: {api_response.status_code}")
    
    except Exception as e:
        print(f"‚ùå Erreur API: {e}")
    
    return True


def test_airflow_services():
    """Test des services Airflow individuels"""
    
    print("\n" + "=" * 40)
    print("TEST 4: Services Airflow")
    print("=" * 40)
    
    services = [
        ("Webserver", "http://localhost:8080/health"),
        ("Scheduler", "http://localhost:8080/health"),
        ("Flower", "http://localhost:5555")
    ]
    
    for service_name, url in services:
        try:
            print(f"\nüîç Test {service_name}...")
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ {service_name}: Op√©rationnel")
            else:
                print(f"‚ö†Ô∏è  {service_name}: R√©ponse {response.status_code}")
        
        except requests.exceptions.RequestException:
            print(f"‚ùå {service_name}: Non accessible")


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTS DE CONNECTIVIT√â AIRFLOW SIGETI")
    print("=" * 60)
    
    success = test_airflow_connection()
    test_airflow_services()
    
    print("\n" + "=" * 60)
    print("üéØ R√âSUM√â")
    print("=" * 60)
    
    if success:
        print("‚úÖ Tests Airflow termin√©s")
        print("üå™Ô∏è Airflow est pr√™t pour les pipelines SIGETI")
        sys.exit(0)
    else:
        print("‚ùå Probl√®mes d√©tect√©s avec Airflow")
        print("üí° V√©rifiez les logs: docker-compose logs airflow-webserver")
        sys.exit(1)