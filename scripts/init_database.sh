#!/bin/bash

# Script d'initialisation SIGETI DWH pour environnement Docker
# Cr√©e automatiquement la base de donn√©es et l'utilisateur si n√©cessaire

set -e  # Arr√™t en cas d'erreur

# Configuration depuis les variables d'environnement
ADMIN_HOST="${SIGETI_NODE_DB_HOST:-host.docker.internal}"
ADMIN_PORT="${SIGETI_NODE_DB_PORT:-5432}"
ADMIN_USER="${SIGETI_NODE_DB_USER:-postgres}"
ADMIN_PASSWORD="${SIGETI_NODE_DB_PASSWORD:-postgres}"

TARGET_DB="${SIGETI_DB_NAME:-sigeti_dwh}"
TARGET_USER="${SIGETI_DB_USER:-sigeti_user}"
TARGET_PASSWORD="${SIGETI_DB_PASSWORD:-sigeti123}"

echo "üê≥ SIGETI DWH - Initialisation Base de Donn√©es"
echo "=============================================="
echo "üèóÔ∏è  Host: $ADMIN_HOST:$ADMIN_PORT"
echo "üóÑÔ∏è  Base cible: $TARGET_DB"
echo "üë§ Utilisateur cible: $TARGET_USER"
echo ""

# Fonction de test de connexion
test_connection() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    local database=${5:-postgres}
    
    PGPASSWORD=$password psql -h $host -p $port -U $user -d $database -c "SELECT 1;" > /dev/null 2>&1
}

# Test de connexion admin
echo "üîç Test de connexion administrateur..."
if test_connection $ADMIN_HOST $ADMIN_PORT $ADMIN_USER $ADMIN_PASSWORD; then
    echo "‚úÖ Connexion admin OK"
else
    echo "‚ùå Impossible de se connecter en tant qu'admin"
    echo "V√©rifiez que PostgreSQL est d√©marr√© et accessible"
    exit 1
fi

# V√©rifier si l'utilisateur existe
echo "üë§ V√©rification de l'utilisateur $TARGET_USER..."
USER_EXISTS=$(PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d postgres -tAc "SELECT 1 FROM pg_user WHERE usename='$TARGET_USER';" 2>/dev/null || echo "")

if [ -z "$USER_EXISTS" ]; then
    echo "üî® Cr√©ation de l'utilisateur $TARGET_USER..."
    PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d postgres -c "
        CREATE USER $TARGET_USER 
        WITH PASSWORD '$TARGET_PASSWORD' 
        CREATEDB 
        LOGIN;
    "
    echo "‚úÖ Utilisateur $TARGET_USER cr√©√©"
else
    echo "üë§ Utilisateur $TARGET_USER existe d√©j√†"
fi

# V√©rifier si la base existe
echo "üóÑÔ∏è  V√©rification de la base $TARGET_DB..."
DB_EXISTS=$(PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$TARGET_DB';" 2>/dev/null || echo "")

if [ -z "$DB_EXISTS" ]; then
    echo "üî® Cr√©ation de la base $TARGET_DB..."
    PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d postgres -c "
        CREATE DATABASE $TARGET_DB 
        WITH OWNER = $TARGET_USER
        ENCODING = 'UTF8'
        TEMPLATE = template0;
    "
    echo "‚úÖ Base $TARGET_DB cr√©√©e"
else
    echo "üóÑÔ∏è  Base $TARGET_DB existe d√©j√†"
fi

# Accorder les permissions sur la base
echo "üîê Configuration des permissions..."
PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d postgres -c "
    GRANT ALL PRIVILEGES ON DATABASE $TARGET_DB TO $TARGET_USER;
"

# Configuration de la structure dans la base cible
echo "üèóÔ∏è  Configuration de la structure de base..."
PGPASSWORD=$ADMIN_PASSWORD psql -h $ADMIN_HOST -p $ADMIN_PORT -U $ADMIN_USER -d $TARGET_DB -c "

-- Cr√©er les extensions n√©cessaires (ignorer les erreurs si d√©j√† install√©es)
CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
CREATE EXTENSION IF NOT EXISTS \"btree_gin\";
CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";

-- Cr√©er les sch√©mas de base
CREATE SCHEMA IF NOT EXISTS staging;
CREATE SCHEMA IF NOT EXISTS dwh;
CREATE SCHEMA IF NOT EXISTS reporting;

-- Accorder les permissions sur les sch√©mas
GRANT ALL ON SCHEMA public TO $TARGET_USER;
GRANT ALL ON SCHEMA staging TO $TARGET_USER;
GRANT ALL ON SCHEMA dwh TO $TARGET_USER;
GRANT ALL ON SCHEMA reporting TO $TARGET_USER;

-- Permissions par d√©faut pour les futures tables
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $TARGET_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA staging GRANT ALL ON TABLES TO $TARGET_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA dwh GRANT ALL ON TABLES TO $TARGET_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA reporting GRANT ALL ON TABLES TO $TARGET_USER;

-- Permissions sur les s√©quences
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO $TARGET_USER;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $TARGET_USER;

-- Table de configuration syst√®me
CREATE TABLE IF NOT EXISTS system_config (
    id SERIAL PRIMARY KEY,
    config_key VARCHAR(100) UNIQUE NOT NULL,
    config_value TEXT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Configuration initiale
INSERT INTO system_config (config_key, config_value, description) 
VALUES 
    ('db_version', '1.0.0', 'Version de la structure de base de donn√©es'),
    ('initialized_at', CURRENT_TIMESTAMP::TEXT, 'Date d''initialisation de la base'),
    ('environment', 'docker', 'Environnement d''ex√©cution')
ON CONFLICT (config_key) DO UPDATE SET 
    config_value = EXCLUDED.config_value,
    updated_at = CURRENT_TIMESTAMP;

-- Permissions sur system_config
GRANT ALL ON system_config TO $TARGET_USER;
GRANT ALL ON system_config_id_seq TO $TARGET_USER;

"

# Test de connexion final avec l'utilisateur cr√©√©
echo "üß™ Test de connexion final avec l'utilisateur $TARGET_USER..."
if test_connection $ADMIN_HOST $ADMIN_PORT $TARGET_USER $TARGET_PASSWORD $TARGET_DB; then
    echo "‚úÖ Test de connexion utilisateur OK"
else
    echo "‚ö†Ô∏è  Probl√®me de connexion utilisateur (peut √™tre normal)"
fi

# Affichage du r√©sum√©
echo ""
echo "üéâ Initialisation termin√©e avec succ√®s!"
echo "üìã R√©sum√©:"
echo "   Base: $TARGET_DB"
echo "   Utilisateur: $TARGET_USER"
echo "   Sch√©mas: public, staging, dwh, reporting"
echo "   Extensions: uuid-ossp, btree_gin, pg_trgm"
echo ""
echo "‚úÖ SIGETI DWH pr√™t pour l'ETL!"