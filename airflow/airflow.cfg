[core]
# The folder where your airflow configuration lives
airflow_home = c:\Users\hynco\Desktop\SIGETI_DWH\airflow

# The folder where airflow should store its log files
base_log_folder = c:\Users\hynco\Desktop\SIGETI_DWH\airflow\logs

# The folder where airflow looks for DAGs
dags_folder = c:\Users\hynco\Desktop\SIGETI_DWH\airflow\dags

# The folder where airflow looks for plugins
plugins_folder = c:\Users\hynco\Desktop\SIGETI_DWH\airflow\plugins

# Airflow can store logs remotely in AWS S3, GCS or Elastic Search.
remote_logging = False

# Logging level
logging_level = INFO

# Executor to use. Options include SequentialExecutor, LocalExecutor, CeleryExecutor
executor = LocalExecutor

# The SqlAlchemy connection string to the metadata database.
# For local development, SQLite is fine
sql_alchemy_conn = sqlite:///c:\Users\hynco\Desktop\SIGETI_DWH\airflow\airflow.db

# Whether to load DAGs in the web server
load_examples = False

# Whether to expose the configuration file through the web server
expose_config = True

# Default timezone
default_timezone = Europe/Paris

[scheduler]
# Task instances listen for external kill signal (when you `airflow tasks kill`)
job_heartbeat_sec = 5

# The scheduler constantly tries to trigger new tasks (look at the scheduler_heartbeat_sec config)
scheduler_heartbeat_sec = 5

# How often (in seconds) to scan the DAGs directory for new files
dag_dir_list_interval = 300

# How often should stats be printed to the logs
print_stats_interval = 30

[webserver]
# The base URL of your website as airflow cannot guess what domain or
# cname you want to use. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = http://localhost:8080

# Default DAG view. Valid values are: tree, graph, duration, gantt, landing_times
default_dag_view = graph

# The port on which to run the web server
web_server_port = 8080

# Secret key used to run your flask app. It should be as random as possible
secret_key = your_secret_key_here

# Expose the configuration file in the web server
expose_config = True

# Set to True to turn on authentication
authenticate = False

[email]
# Email backend to use
email_backend = airflow.utils.email.send_email_smtp

[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = localhost
smtp_starttls = True
smtp_ssl = False
smtp_port = 587
smtp_mail_from = airflow@localhost